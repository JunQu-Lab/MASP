MyDistriPlot <- function(df, location, target_name, limit, scale = TRUE, upperL = 2, lowerL = -2,
color1, color2, color3, transparent = FALSE, mask = FALSE, Legend = TRUE, g = g){
#outputs <- list()
new_loc <- loc_convert(location)
target <- df[grep(target_name, rownames(df)),]
target <- target[1,]
#if(scale) target[1,] <- (target[1,]-mean(target[1,],na.rm= TRUE))/sd(target[1,],na.rm = TRUE)
new_loc$value <- NA
for (i in 1:nrow(new_loc)) {
tmp <- which(new_loc$Name[i] == names(target))
if(length(tmp) != 0)
new_loc$value[i] <- target[tmp]
}
new_loc$value <- as.numeric(new_loc$value)
if(limit == 'none'){
range_tmp <- range(as.numeric(new_loc$value), na.rm = TRUE)
UpperLimit <- range_tmp[2]
LowerLimit <- range_tmp[1]
}
if(limit == 'outlierRM'){
target <- target[!is.na(target)]
outliers <- boxplot.stats(as.numeric(target))$out
dataRange <- target[!as.numeric(target) %in% outliers]
UpperLimit <- range(dataRange)[2]
LowerLimit <- range(dataRange)[1]
}
if(limit == 'customized'){
UpperLimit <- as.numeric(upperL)
LowerLimit <- as.numeric(lowerL)
}
for (i in 1:nrow(new_loc)) {
tmp <-new_loc$value[i]
if(!is.na(tmp)){
if(tmp > UpperLimit){
new_loc$value[i] <- UpperLimit
}
if(tmp < LowerLimit){
new_loc$value[i] <- LowerLimit
}
}
}
if(transparent) transparent2 <- "transparent" else transparent2 <- NA
if(Legend) legend2 <- 'right' else legend2 <- 'none'
# read png mask
PlotTitle <- paste('Heatmap for Protein', rownames(target))
new_loc$row <- factor(new_loc$row, levels = base::sort(unique(new_loc$row), decreasing = TRUE))
new_loc$column <- factor(new_loc$column, levels = base::sort(unique(new_loc$column), decreasing = FALSE))
if(mask){
output <- ggplot(new_loc, aes(column, row, fill= value)) +
geom_tile() + xlab('Rows') + ylab('Columns') + labs(fill = 'Protein Abundance') +
scale_fill_gradientn(colors = c(color1,color2,color3),na.value = '#A9A9A9') +
scale_x_discrete(breaks = 1:(ncol(location)+1)) +
scale_y_discrete(breaks = 1:(nrow(location)+1)) +
annotation_custom(g, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
coord_fixed() +
ggtitle(PlotTitle) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position=legend2,panel.grid.minor=element_blank(),
panel.border=element_rect(size=1,fill=NA,colour="black"),
panel.background = element_rect(fill = "#A9A9A9",colour = NA),
plot.background = element_rect(fill = transparent2,colour = NA),
panel.grid.major = element_blank()) +
theme(axis.text=element_text(size=14, family="Helvetica", colour="black"),
axis.title=element_text(size=14, family="Helvetica",colour="black"),
legend.text=element_text(size=14, family="Helvetica",colour="black"),
legend.title=element_text(size=14, family="Helvetica", colour="black"))
}else{
output <- ggplot(new_loc, aes(column, row, fill= value)) +
geom_tile() + xlab('Rows') + ylab('Columns') + labs(fill = 'Protein Abundance') +
scale_fill_gradientn(colors = c(color1,color2,color3),na.value = '#A9A9A9') +
scale_x_discrete(breaks = 1:(ncol(location)+1)) +
scale_y_discrete(breaks = 1:(nrow(location)+1)) +
coord_fixed() +
ggtitle(PlotTitle) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position=legend2,panel.grid.minor=element_blank(),
panel.border=element_rect(size=1,fill=NA,colour="black"),
panel.background = element_rect(fill = "#A9A9A9",colour = NA),
plot.background = element_rect(fill = transparent2,colour = NA),
panel.grid.major = element_blank()) +
theme(axis.text=element_text(size=14, family="Helvetica", colour="black"),
axis.title=element_text(size=14, family="Helvetica",colour="black"),
legend.text=element_text(size=14, family="Helvetica",colour="black"),
legend.title=element_text(size=14, family="Helvetica", colour="black"))
}
return(output)
}
informationMyDistriPlot_batch <- function(df, location, proteins_csv, directory, limit, upperL = 2, lowerL = -2, mask = FALSE,
color1, color2, color3, transparent = FALSE, Legend = TRUE, width, height, g = g){
withProgress(message = 'Batch Plots', value = 0, {
Proteins <- unname(unlist(proteins_csv))
current_dir <- getwd()
setwd(directory)
for (i in 1:length(Proteins)) {
incProgress(i/length(Proteins), detail = 'generating...')
output <- MyDistriPlot(df = df,location = location, target_name = Proteins[i], limit = limit, upperL = upperL, lowerL = lowerL,
mask = mask, color1 = color1, color2 = color2, color3 = color3,
transparent = transparent, Legend = Legend, g = g)
ggsave(filename = paste('Distribution_of_', Proteins[i],'.png',sep = ''), plot = output, device='png', width = width, height = height, dpi = 300)
}
})
}
library(devtools)
library(roxygen2)
library(usethis)
use_apache_license(version = 2, include_future = TRUE)
devtools::load_all()
MAsP::MAsPShiny()
system.file("shiny", "MAsP",package = "MAsP")
devtools::load_all()
MAsP::MAsPShiny()
devtools::document()
devtools::load_all()
MAsPShiny()
library(shiny)
library(shinydashboard)
library(tools)
library(ggplot2)
library(lsa)
library(png)
library(graphics)
library(grid)
library(gridExtra)
library(Spectrum)
MAsPShiny()
MAsPShiny()
devtools::load_all()
MAsPShiny()
2426+209-108
1277+146-79
?ggsave
library(ggplot2)
?ggsave
shiny::runApp('inst/shiny/MAsP')
library(devtools)
devtools::load_all()
MAsP::MAsPShiny()
library(shiny)
library(shinydashboard)
library(tools)
library(ggplot2)
library(lsa)
library(png)
library(graphics)
library(grid)
library(gridExtra)
library(Spectrum)
MAsP::MAsPShiny()
MAsP::MAsPShiny()
runApp('inst/shiny/MAsP')
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
MAsPShiny()
runApp('inst/shiny/MAsP')
runApp('inst/shiny/MAsP')
runApp('inst/shiny/MAsP')
devtools::load_all()
MAsPShiny()
runApp('inst/shiny/MAsP')
load_all()
MAsPShiny()
load_all()
MAsPShiny()
load_all()
MAsPShiny()
load_all()
MAsPShiny()
runApp('inst/shiny/MAsP')
devtools::load_all()
devtools::document()
devtools::load_all()
MAsPShiny()
MAsP::MAsPShiny()
library(shiny)
library(shinydashboard)
library(tools)
library(ggplot2)
library(lsa)
library(png)
library(graphics)
library(grid)
library(gridExtra)
library(Spectrum)
devtools::load_all()
MAsPShiny()
library(shiny)
library(shinydashboard)
library(tools)
library(ggplot2)
library(lsa)
library(png)
library(graphics)
library(grid)
library(gridExtra)
library(Spectrum)
load_all()
devtools::load_all()
MAsPShiny()
MAsPShiny()
MyDistriPlot <- function(df, location, target_name, limit, scale = TRUE, upperL = 2, lowerL = -2,
color1, color2, color3, transparent = FALSE, mask = FALSE, Legend = TRUE, g = g){
#outputs <- list()
new_loc <- loc_convert(location)
rownames(df) <- toupper(rownames(df))
target_name <- toupper(target_name)
target <- df[grep(target_name, rownames(df)),]
target <- target[1,]
target_name <- toupper(rownames(target))
legend_label <- 'Protein Relative Abundance'
if(scale){
tmp_value <- as.numeric(target)
tmp_value <- tmp_value-mean(tmp_value, na.rm = TRUE)/sd(tmp_value, na.rm = TRUE)
target[1,] <- tmp_value
legend_label = "Protein Z-score"
}
new_loc$value <- NA
for (i in 1:nrow(new_loc)) {
tmp <- which(new_loc$Name[i] == names(target))
if(length(tmp) != 0)
new_loc$value[i] <- target[tmp]
}
new_loc$value <- as.numeric(new_loc$value)
if(limit == 'none'){
range_tmp <- range(as.numeric(new_loc$value), na.rm = TRUE)
UpperLimit <- range_tmp[2]
LowerLimit <- range_tmp[1]
}
if(limit == 'outlierRM'){
target <- target[!is.na(target)]
outliers <- boxplot.stats(as.numeric(target))$out
dataRange <- target[!as.numeric(target) %in% outliers]
UpperLimit <- range(dataRange)[2]
LowerLimit <- range(dataRange)[1]
}
if(limit == 'customized'){
UpperLimit <- as.numeric(upperL)
LowerLimit <- as.numeric(lowerL)
}
for (i in 1:nrow(new_loc)) {
tmp <-new_loc$value[i]
if(!is.na(tmp)){
if(tmp > UpperLimit){
new_loc$value[i] <- UpperLimit
}
if(tmp < LowerLimit){
new_loc$value[i] <- LowerLimit
}
}
}
if(transparent) transparent2 <- "transparent" else transparent2 <- NA
if(Legend) legend2 <- 'right' else legend2 <- 'none'
# read png mask
PlotTitle <- paste('Heatmap for Protein', target_name)
new_loc$row <- factor(new_loc$row, levels = base::sort(unique(new_loc$row), decreasing = TRUE))
new_loc$column <- factor(new_loc$column, levels = base::sort(unique(new_loc$column), decreasing = FALSE))
if(mask){
output <- ggplot(new_loc, aes(column, row, fill= value)) +
geom_tile() + xlab('Columns') + ylab('Rows') + labs(fill = legend_label) +
scale_fill_gradientn(colors = c(color1,color2,color3),na.value = '#A9A9A9') +
scale_x_discrete(breaks = 1:(ncol(location)+1)) +
scale_y_discrete(breaks = 1:(nrow(location)+1)) +
annotation_custom(g, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
coord_fixed() +
ggtitle(PlotTitle) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position=legend2,panel.grid.minor=element_blank(),
panel.border=element_rect(size=1,fill=NA,colour="black"),
panel.background = element_rect(fill = "#A9A9A9",colour = NA),
plot.background = element_rect(fill = transparent2,colour = NA),
panel.grid.major = element_blank()) +
theme(axis.text=element_text(size=14, family="Helvetica", colour="black"),
axis.title=element_text(size=14, family="Helvetica",colour="black"),
legend.text=element_text(size=14, family="Helvetica",colour="black"),
legend.title=element_text(size=14, family="Helvetica", colour="black"))
}else{
output <- ggplot(new_loc, aes(column, row, fill= value)) +
geom_tile() + xlab('Columns') + ylab('Rows') + labs(fill = legend_label) +
scale_fill_gradientn(colors = c(color1,color2,color3),na.value = '#A9A9A9') +
scale_x_discrete(breaks = 1:(ncol(location)+1)) +
scale_y_discrete(breaks = 1:(nrow(location)+1)) +
coord_fixed() +
ggtitle(PlotTitle) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position=legend2,panel.grid.minor=element_blank(),
panel.border=element_rect(size=1,fill=NA,colour="black"),
panel.background = element_rect(fill = "#A9A9A9",colour = NA),
plot.background = element_rect(fill = transparent2,colour = NA),
panel.grid.major = element_blank()) +
theme(axis.text=element_text(size=14, family="Helvetica", colour="black"),
axis.title=element_text(size=14, family="Helvetica",colour="black"),
legend.text=element_text(size=14, family="Helvetica",colour="black"),
legend.title=element_text(size=14, family="Helvetica", colour="black"))
}
return(output)
}
devtools::load_all()
rm(list = ls())
devtools::load_all()
MAsPShiny()
library(rlang)
library("rlang")
shiny::runApp('inst/shiny/MAsP')
library(png)
png::readPNG
?rasterGrob
??rasterGrob
devtools::load_all()
MAsPShiny()
devtools::document()
devtools::install()
library(MAsP)
MAsP::MAsPShiny()
remove.packages('MAsP')
devtools::load_all()
library(ggplot2)
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(devtools)
devtools::load_all()
MAsP::MAsPShiny()
load_all()
load_all()
MAsPShiny()
library(devtools)
devtools::load_all()
MAsPShiny()
devtools::load_all()
MAsPShiny()
devtools::document()
devtools::load_all()
MAsPShiny()
devtools::document()
library(devtools)
devtools::install()
library(MAsP)
remove.packages()
remove.packages('MAsP')
devtools::install()
library(MAsP)
library(MAsP)
MAsPShiny()
remove.packages('MAsP')
library(devtools)
devtools::install()
library(MAsP)
MAsPShiny()
remove.packages('MAsP')
devtools::document()
library(devtools)
devtools::load_all()
library(MAsP)
MAsP::library.dynam.unload
devtools::document()
devtools::load_all()
library(MAsP)
library(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
library(MAsP)
MAsP::SVD_plot
remove.packages('MAsP')
devtools::install()
library(MAsP)
library(devtools)
devtools::install()
library(MAsP)
remove.packages('MAsP')
devtools::document()
devtools::load_all()
MAsPShiny()
devtools::document()
